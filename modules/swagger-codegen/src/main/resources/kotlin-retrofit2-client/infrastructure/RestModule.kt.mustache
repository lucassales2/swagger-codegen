package {{packageName}}.infrastructure

import okhttp3.*
import java.io.File
import java.io.IOException
import java.util.regex.Pattern
import com.squareup.moshi.KotlinJsonAdapterFactory
import com.squareup.moshi.Moshi
import com.squareup.moshi.Rfc3339DateJsonAdapter
import okhttp3.OkHttpClient
import retrofit2.Converter
import retrofit2.Retrofit
import java.util.*
import dagger.Module
import dagger.Provides
import dagger.Singleton

@Module
class ApiClient {

    @Provides
    @Singleton
    fun provideMoshi(): Moshi {
        return Moshi.Builder()
                .add(KotlinJsonAdapterFactory())
                .add(Date::class.java, Rfc3339DateJsonAdapter().nullSafe())
                .build()
    }

    @Provides
    @Named("NAME_BASE_URL")
    @Singleton
    fun provideBaseUrlString(appConfig: AppConfig): String {
        return "{{{basePath}}}"
    }

    @Provides
    @Singleton
    fun provideGsonConverter(moshi: Moshi): Converter.Factory {
        return MoshiConverterFactory.create(moshi)
    }

    @Provides
    @Singleton
    fun provideRetrofit(
        client: OkHttpClient,
        converter: Converter.Factory,
        @Named("NAME_BASE_URL") baseUrl: String
    ): Retrofit {
        return Retrofit.Builder()
            .client(client)
            .baseUrl(baseUrl)
            .addConverterFactory(converter)
            .build()
    }

    @Provides
    @Singleton
    fun provideOkhttpClient(): OkhttpClient {
        return OkHttpClient.Builder().build
    }
}